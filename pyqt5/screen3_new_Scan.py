# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'testing_table.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys, os
from os.path import normpath, basename

sys.path.append(os.path.abspath(os.path.join('..')))
from Scan import Scan
from PyQt5 import QtCore, QtWidgets
import pandas as pd
from PyQt5.QtCore import QAbstractTableModel, Qt, QObject, QThread, pyqtSignal
from PyQt5.QtWidgets import QHeaderView
import os
import copy
import time
NUM_THRESHOLDING_METHOD_OPTIONS = 7
NUM_RESIZING_METHOD_OPTIONS = 3
dict_output_names = {'pdf_filename': 'PDF', 'cer': 'CER', 'wer': 'WER', 'thresholding_method': 'THRESHOLDING',
                     'resizing_method': 'RESIZING'}


class Ui_Screen3(object):

    def __init__(self, dict_parameters):
        self.dict_parameters = dict_parameters

    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(979, 671)

        self.thread = {}
        self.n = 1
        self.df = pd.DataFrame()

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.RunSamplePushButton = QtWidgets.QPushButton(self.centralwidget)
        self.RunSamplePushButton.setGeometry(QtCore.QRect(790, 80, 91, 51))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/icons/icons/118620_play_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.RunSamplePushButton.setIcon(icon)
        self.RunSamplePushButton.setObjectName("RunSamplePushButton")
        self.RunSamplePushButton.clicked.connect(self.runLongTask)
        self.RefreshPushButton = QtWidgets.QPushButton(self.centralwidget)
        self.RefreshPushButton.setGeometry(QtCore.QRect(890, 80, 51, 51))
        self.RefreshPushButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/icons/icons/icons8-refresh-50.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.RefreshPushButton.setIcon(icon1)
        self.RefreshPushButton.setObjectName("RefreshPushButton")
        self.RefreshPushButton.clicked.connect(self.refresh)
        self.OutputTableView = QtWidgets.QTableView(self.centralwidget)
        self.OutputTableView.setGeometry(QtCore.QRect(40, 60, 721, 461))
        self.OutputTableView.setObjectName("OutputTableView")
        self.RunSampleProgressLabel = QtWidgets.QLabel(self.centralwidget)
        self.RunSampleProgressLabel.setGeometry(QtCore.QRect(790, 190, 151, 91))
        self.RunSampleProgressLabel.setObjectName("RunSampleProgressLabel")
        self.ProgressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.ProgressBar.setGeometry(QtCore.QRect(790, 150, 151, 21))
        self.ProgressBar.setProperty("value", 24)
        self.ProgressBar.setObjectName("ProgressBar")
        self.RunBookPushButton = QtWidgets.QPushButton(self.centralwidget)
        self.RunBookPushButton.setGeometry(QtCore.QRect(820, 440, 81, 31))
        self.RunBookPushButton.setIcon(icon)
        self.RunBookPushButton.setObjectName("RunBookPushButton")
        self.RunBookPushButton.clicked.connect(self.run_end_2_end)
        self.TimeScanLabel = QtWidgets.QLabel(self.centralwidget)
        self.TimeScanLabel.setGeometry(QtCore.QRect(40, 540, 721, 16))
        self.TimeScanLabel.setObjectName("TimeScanLabel")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 979, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def reportProgress(self, n, n_total):
        self.ProgressBar.setMinimum(0)
        self.ProgressBar.setMaximum(n_total)
        self.ProgressBar.setValue(n + 1)
        self.RunSampleProgressLabel.setText(f"Step: {n} out of {n_total}")
        self.RunSampleProgressLabel.adjustSize()

    def run_end_2_end(self):
        self.df = pd.read_csv("C:/Users/Hp/PycharmProjects/ImageToTextArgentina/data/df_output.csv")
        self.dict_parameters['AdvancedParameters']['ThresholdingMethod'] = self.df['thresholding_method'][0]
        self.dict_parameters['AdvancedParameters']['ResizingMethod'] = self.df['resizing_method'][0]
        ScanBook = Scan(self.dict_parameters)
        df_output = ScanBook.run_end_2_end()
        with open('../data/df_output.txt', 'w') as f:
            f.writelines(df_output)

    class Worker(QObject):

        def __init__(self, dict_parameters):
            QObject.__init__(self)
            self.dict_parameters = dict_parameters

        finished = pyqtSignal()
        progress = pyqtSignal(int, int)

        def run(self):
            # self.dict_parameters = {
            #     'Paths': {'BookFile': 'C:/Users/Hp/PycharmProjects/ImageToTextArgentina/data/libro_1.pdf',
            #               'SampleFile': 'C:/Users/Hp/PycharmProjects/ImageToTextArgentina/data/libro_1_sample.txt'},
            #     'GeneralParameters': {'FirstPage': 20, 'LastPage': 21, 'Sampling': 0, 'ThresholdingImage': True,
            #                           'ResizingImage': True},
            #     'AdvancedParameters': {'ThresholdingMethod': 'All', 'ResizingMethod': 'All'}}

            self.dict_parameters_list = []

            if self.dict_parameters['AdvancedParameters']['ThresholdingMethod'] == 'All' and not \
                    self.dict_parameters['AdvancedParameters']['ResizingMethod'] == 'All':
                for num in range(1, NUM_THRESHOLDING_METHOD_OPTIONS + 1):
                    self.dict_parameters_list.append(copy.deepcopy(self.dict_parameters))
                    self.dict_parameters_list[num - 1]['AdvancedParameters']['ThresholdingMethod'] = num

            if self.dict_parameters['AdvancedParameters']['ResizingMethod'] == 'All' and not \
                    self.dict_parameters['AdvancedParameters'][
                        'ThresholdingMethod'] == 'All':
                for num in range(1, NUM_RESIZING_METHOD_OPTIONS + 1):
                    self.dict_parameters_list.append(copy.deepcopy(self.dict_parameters))
                    self.dict_parameters_list[num - 1]['AdvancedParameters']['ThresholdingMethod'] = num

            if self.dict_parameters['AdvancedParameters']['ThresholdingMethod'] == 'All' and \
                    self.dict_parameters['AdvancedParameters'][
                        'ResizingMethod'] == 'All':
                for num in range(1, NUM_THRESHOLDING_METHOD_OPTIONS + 1):
                    for num_2 in range(1, NUM_RESIZING_METHOD_OPTIONS + 1):
                        self.dict_parameters_list.append(copy.deepcopy(self.dict_parameters))
                        self.dict_parameters_list[(num - 1) * NUM_RESIZING_METHOD_OPTIONS + num_2 - 1][
                            'AdvancedParameters'][
                            'ThresholdingMethod'] = num
                        self.dict_parameters_list[(num - 1) * NUM_RESIZING_METHOD_OPTIONS + num_2 - 1][
                            'AdvancedParameters'][
                            'ResizingMethod'] = num_2

            else:
                self.dict_parameters_list.append(copy.deepcopy(self.dict_parameters))

            df_output_total = pd.DataFrame(
                columns=['pdf_filename', 'sample_filename', 'txt_reference', 'ocr_output', 'cer', 'wer',
                         'resizing_method',
                         'thresholding_method'])
            num = 0
            for self.dict_parameters in self.dict_parameters_list:
                num += 1
                num_total = len(self.dict_parameters_list)
                start_time = time.time()
                self.progress.emit(num, num_total)
                print(self.dict_parameters)
                ScanBook = Scan(self.dict_parameters)
                df_output = ScanBook.run()
                end_time = time.time()
                total_time = end_time - start_time

                df_output['time_per_page'] = total_time / (self.dict_parameters['GeneralParameters']['LastPage'] -
                                 self.dict_parameters['GeneralParameters']['FirstPage'] + 1)
                df_output_total = pd.concat([df_output_total, df_output])
                df_output_total.sort_values(['cer'], inplace = True)
                df_output_total.to_csv("C:/Users/Hp/PycharmProjects/ImageToTextArgentina/data/df_output.csv",
                                       index=False)
            self.finished.emit()

    def runLongTask(self):
        # Step 2: Create a QThread object
        self.thread = QThread()
        # Step 3: Create a worker object
        self.worker = self.Worker(self.dict_parameters)
        # Step 4: Move worker to the thread
        self.worker.moveToThread(self.thread)
        # Step 5: Connect signals and slots
        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        self.worker.progress.connect(self.reportProgress)
        # Step 6: Start the thread
        self.thread.start()

        # Final resets
        self.RunSamplePushButton.setEnabled(False)
        self.thread.finished.connect(
            lambda: self.RunSamplePushButton.setEnabled(True)
        )
        self.thread.finished.connect(
            lambda: self.RunSampleProgressLabel.setText("Step: 0")
        )

    class pandasModel(QAbstractTableModel):
        def __init__(self, data):
            QAbstractTableModel.__init__(self)
            self._data = data

        def rowCount(self, parent=None):
            return self._data.shape[0]

        def columnCount(self, parnet=None):
            return self._data.shape[1]

        def data(self, index, role=Qt.DisplayRole):
            if index.isValid():
                if role == Qt.DisplayRole:
                    return str(self._data.iloc[index.row(), index.column()])
            return None

        def headerData(self, col, orientation, role):
            if orientation == Qt.Horizontal and role == Qt.DisplayRole:
                return self._data.columns[col]
            return None

    # def run(self):
    #     sleep(4)

    def refresh(self):
        # self.df.replace([self.df['b'][0]], self.df['b'][0] + self.n, inplace=True)
        cwd = os.getcwd()
        self.df = pd.read_csv("C:/Users/Hp/PycharmProjects/ImageToTextArgentina/data/df_output.csv")
        self.df.sort_values(['cer'], inplace = True)
        self.df = self.df[['pdf_filename', 'cer', 'wer', 'thresholding_method', 'resizing_method']]
        self.df['pdf_filename'] = self.df['pdf_filename'].apply(lambda x: self.pdf_name_from_path(x))
        self.df.rename(columns=dict_output_names, inplace = True)
        model = self.pandasModel(self.df)
        self.OutputTableView.setModel(model)
        header = self.OutputTableView.horizontalHeader()
        for n in range(self.df.shape[1]):
            header.setSectionResizeMode(n, QHeaderView.Stretch)
        self.OutputTableView.show()

    def pdf_name_from_path(self, path):
        pdf_name = basename(normpath(path))
        return pdf_name

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.RunSamplePushButton.setText(_translate("MainWindow", "Test"))
        self.RefreshPushButton.setText(_translate("MainWindow", ""))
        self.RunSampleProgressLabel.setText(_translate("MainWindow", "Click Run Button"))
        self.RunBookPushButton.setText(_translate("MainWindow", "Book"))
        self.TimeScanLabel.setText(_translate("MainWindow", "Time estimated of scanning full book: 0 sec"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_Screen3()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
